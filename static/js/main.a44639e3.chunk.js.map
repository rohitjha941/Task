{"version":3,"sources":["serviceWorker.js","compopnents/blue/index.jsx","compopnents/login/index.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Blue","className","this","props","children","Component","Login","type","required","alt","src","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBeC,G,6LAEb,OACI,0BAAMC,UAAY,QACbC,KAAKC,MAAMC,c,GAJMC,cCEbC,E,iLAEjB,OACE,yBAAKL,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,cADF,0BAIA,0BAAMA,UAAU,cACd,wCAEA,yBAAKA,UAAU,eACb,2BAAOM,KAAK,QAAQC,UAAQ,KAE9B,2CAEA,yBAAKP,UAAU,eACb,2BAAOM,KAAK,WAAWC,UAAQ,KAEjC,2BAAOP,UAAY,eAAeM,KAAK,YAGzC,yBAAKN,UAAY,YACb,qCAGJ,yBAAKA,UAAY,gBACb,yBAAKA,UAAY,uBACb,yBAAKQ,IAAO,SAASC,IAAM,yHAG/B,yBAAKT,UAAY,yBACb,yBAAKQ,IAAO,KAAKC,IAAM,iGAI/B,yBAAKT,UAAY,kBAAjB,wBACyB,kBAAC,EAAD,uB,GArCEI,a,kDCCdM,E,iLAEb,OACI,6BACI,kBAAC,EAAD,W,GAJiBN,aAYjCO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SHkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a44639e3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport \"./index.scss\";\nexport default class Blue extends Component {\n    render() {\n        return (\n            <span className = \"blue\">\n                {this.props.children}\n            </span>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport Blue from \"../blue\";\n\nexport default class Login extends Component {\n  render() {\n    return (\n      <div className=\"login\">\n        <div className=\"login-heading\">\n          <Blue>Login</Blue> to know more about us\n        </div>\n\n        <form className=\"login-form\">\n          <label>Email</label>\n\n          <div className=\"login-input\">\n            <input type=\"email\" required></input>\n          </div>\n          <label>Password</label>\n\n          <div className=\"login-input\">\n            <input type=\"password\" required></input>\n          </div>           \n          <input className = \"login-submit\" type=\"submit\"></input>\n        </form>\n\n        <div className = \"login-or\">\n            <span>OR</span>\n        </div>\n\n        <div className = \"login-social\">\n            <div className = \"login-social-google\">\n                <img alt  = \"google\" src = \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png\" />\n            </div>\n        \n            <div className = \"login-social-facebook\">\n                <img alt  = \"fb\" src = \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/F_icon.svg/1024px-F_icon.svg.png\" />\n            </div>\n        </div>\n\n        <div className = \"login-register\">\n            Still not a member ? <Blue>Register</Blue>\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport React, { Component } from 'react';\nimport Login from \"./compopnents/login\"\nimport \"./index.scss\";\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <Login />\n            </div>\n        )\n    }\n}\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}